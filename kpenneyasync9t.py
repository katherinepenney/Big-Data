# -*- coding: utf-8 -*-
"""kpenneyasync9t.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ABJ1gt65fMBXLbhfI5qxHlyaoexJiSyF

**Instructions**
#### • The research question is can we use algorithms and compute to identify clothing items? Specifically, can we determine which algorithm and compute methodology provides us the most efficient approach for classifying simple fashion images?
### • Using the base samples available from Zalando Research:
#### o https://github.com/zalandoresearch/fashion-mnist
#### o Review the data – clean as appropriate
#### o Provide an initial data analysis
### • Implement at least two approaches for classifying the digits – examples below:
####o Naïve bayes
#### o Neural Networks
#### o Keras
#### o Azure ML
#### o IBM DSX
#### o Boosted trees
#### o Linear classification
#### o Your choice
#### • Answer the following questions:
#### o What is the accuracy of each method?
#### o What are the trade-offs of each approach?
#### o What is the compute performance of each approach?
#Additional Instructions
#### • Don’t forget what you learned in your previous courses; do your own work, document any assistance, use comments for clarity.
#### • Report results for both the training set and the test set.
#### • Feel free to use any software to conduct your analysis and produce your graphics
"""

# Python 2.7 |Continuum Analytics, Inc.|
# Jupyter Notebook 5.0.0

# SAMPLE CODE FOR TEMPLATE MATCHING
# BASED ON OpenCV Tutorials

import cv2
import sys
from matplotlib import pyplot as plt
import numpy as np

# GET IMAGES

imagePath = ('Images/hero.jpg')
cascPath = "haarcascade_frontalface_default.xml"

image = cv2.imread(imagePath)

#plt.imshow(image)
#plt.show()

gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Create the haar cascade
faceCascade = cv2.CascadeClassifier(cascPath)

# Detect faces in the image
faces = faceCascade.detectMultiScale(
    gray,
    scaleFactor=1.2,
    minNeighbors=5,
    minSize=(30, 30)
    #flags = cv2.CV_HAAR_SCALE_IMAGE
)

print("Found {0} faces!".format(len(faces)))

# RUN INTERACTIVE WITH NOTEBOOK

# Draw a rectangle around the faces
for (x, y, w, h) in faces:
    cv2.rectangle(image, (x, y), (x+w, y+h), (0, 255, 0), 12)

plt.imshow(image)
plt.show()

